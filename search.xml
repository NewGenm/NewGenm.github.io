<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习Ajax（三）</title>
      <link href="/2021/11/07/%E5%AD%A6%E4%B9%A0Ajax%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2021/11/07/%E5%AD%A6%E4%B9%A0Ajax%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>这个篇章来解决跨域请求的问题</p><span id="more"></span><h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><p>当一个请求url的协议、域名、端口三者之间任意一个与当前页面url不同即为跨域</p><table><thead><tr><th>当前页面url</th><th>当前页面url</th><th>是否跨域</th><th>原因</th></tr></thead><tbody><tr><td><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="http://www.test.com/index.html">http://www.test.com/index.html</a></td><td>否</td><td>同源（协议、域名、端口号相同）</td></tr><tr><td><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="https://www.test.com/index.html">https://www.test.com/index.html</a></td><td>跨域</td><td>协议不同（http/https）</td></tr><tr><td><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="http://www.baidu.com/">http://www.baidu.com/</a></td><td>跨域</td><td>主域名不同（test/baidu）</td></tr><tr><td><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="http://blog.test.com/">http://blog.test.com/</a></td><td>跨域</td><td>子域名不同（www/blog）</td></tr><tr><td><a href="http://www.test.com:8080/">http://www.test.com:8080/</a></td><td><a href="http://www.test.com:7001/">http://www.test.com:7001/</a></td><td>跨域</td><td>端口号不同（8080/7001）</td></tr></tbody></table><h2 id="为什么会出现跨域"><a href="#为什么会出现跨域" class="headerlink" title="为什么会出现跨域"></a>为什么会出现跨域</h2><p>出于浏览器的同源策略限制。同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。</p><h2 id="jsonp解决跨域问题"><a href="#jsonp解决跨域问题" class="headerlink" title="jsonp解决跨域问题"></a>jsonp解决跨域问题</h2><h3 id="jsonp是什么"><a href="#jsonp是什么" class="headerlink" title="jsonp是什么"></a>jsonp是什么</h3><p>jsonp（JSON with Padding），是一个非官方的跨域解决方案，只支持get请求，<br>jsonp的原理是使用script标签的跨域能力来发送请求</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>流程：<br>    1.用户在input中输入完成，失去焦点后，触发事件<br>    2.事件获取用户输入的值（这里没有与后端进行比较，只是进行模拟）<br>    3.创建一个script标签，并设置scr属性，url为后端的对应地址<br>    4.将script插入到全局中<br>    5.事件结束后，全局中就会有一个新的script标签，会进行一个GET请求<br>    6.后端接收到请求后，进行对比数据（模拟就没有进行对比）<br>    7.发现数据不对，将data中的数据使用json转换为字符串<br>    8.发送回用户端，发送内容为<code>handle($&#123;str&#125;)</code> （ES6新语法，字符串和变量拼串）<br>    9.使用handel()，用户页面发生变化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//获取 input 元素</span><br><span class="line">const input = document.querySelector(&#x27;input&#x27;);</span><br><span class="line">const p = document.querySelector(&#x27;p&#x27;);</span><br><span class="line">        </span><br><span class="line">//声明 handle 函数</span><br><span class="line">function handle(data)&#123;</span><br><span class="line">    input.style.border = &quot;solid 1px #f00&quot;;</span><br><span class="line">    //修改 p 标签的提示文本</span><br><span class="line">    p.innerHTML = data.msg;</span><br><span class="line">&#125;</span><br><span class="line">// jsonp发送跨域请求原理，通过script标签能够跨域请求的特性，在事件中的script标签，即动态src地址，最后将script标签暴露到全局，即可实现跨域请求</span><br><span class="line"></span><br><span class="line">//绑定事件</span><br><span class="line">input.onblur = function()&#123;</span><br><span class="line">    //获取用户的输入值</span><br><span class="line">    let username = this.value;</span><br><span class="line">    //向服务器端发送请求 检测用户名是否存在</span><br><span class="line">    //1. 创建 script 标签</span><br><span class="line">    const script = document.createElement(&#x27;script&#x27;);</span><br><span class="line">    //2. 设置标签的 src 属性</span><br><span class="line">    script.src = &#x27;http://127.0.0.1:8000/check-username&#x27;;</span><br><span class="line">    //3. 将 script 插入到文档中</span><br><span class="line">    document.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//后端内容</span><br><span class="line">//用户名检测是否存在</span><br><span class="line">app.all(&#x27;/check-username&#x27;,(request, response) =&gt; &#123;</span><br><span class="line">    const data = &#123;</span><br><span class="line">        exist: 1,</span><br><span class="line">        msg: &#x27;用户名已经存在&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">    //将数据转化为字符串</span><br><span class="line">    let str = JSON.stringify(data);</span><br><span class="line">    //返回结果</span><br><span class="line">    response.end(`handle($&#123;str&#125;)`);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="jQuery使用jsonp"><a href="#jQuery使用jsonp" class="headerlink" title="jQuery使用jsonp"></a>jQuery使用jsonp</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 在url后面添加?callback=?是固定格式</span><br><span class="line">// #result是一个div，返回回调函数后就会获得数据</span><br><span class="line">$.getJSON(&#x27;http://127.0.0.1:8000/jquery-jsonp-server?callback=?&#x27;, function(data)&#123;</span><br><span class="line">    $(&#x27;#result&#x27;).html(`</span><br><span class="line">        名称: $&#123;data.name&#125;&lt;br&gt;</span><br><span class="line">        地区: $&#123;data.city&#125;</span><br><span class="line">    `)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 后端内容</span><br><span class="line">//jQuery发送jsonp</span><br><span class="line">app.all(&#x27;/jquery-jsonp-server&#x27;,(request, response) =&gt; &#123;</span><br><span class="line">    // response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);</span><br><span class="line">    const data = &#123;</span><br><span class="line">        name:&#x27;城市&#x27;,</span><br><span class="line">        city: [&#x27;北京&#x27;,&#x27;上海&#x27;,&#x27;深圳&#x27;]</span><br><span class="line">    &#125;;</span><br><span class="line">    //将数据转化为字符串</span><br><span class="line">    let str = JSON.stringify(data);</span><br><span class="line">    //接收 callback 参数</span><br><span class="line">    let cb = request.query.callback;</span><br><span class="line"></span><br><span class="line">    //返回结果</span><br><span class="line">    // 返回的是一个callback函数，参数是str</span><br><span class="line">    response.end(`$&#123;cb&#125;($&#123;str&#125;)`); //转换为代码是 cb(str) 一个回调函数</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习Ajax（二）</title>
      <link href="/2021/11/04/%E5%AD%A6%E4%B9%A0Ajax%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2021/11/04/%E5%AD%A6%E4%B9%A0Ajax%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>上一章讲解了HTTP相关内容，这一章来学习如何使用Ajax</p><span id="more"></span><h2 id="原生使用Ajax"><a href="#原生使用Ajax" class="headerlink" title="原生使用Ajax"></a>原生使用Ajax</h2><p>常用的Ajax请求分为GET请求和POST请求<br>GET请求常用于查询操作、搜索操作、读操作等不修改数据的操作<br>POST请求常用于大量交互、修改数据等操作</p><h3 id="GET请求操作"><a href="#GET请求操作" class="headerlink" title="GET请求操作"></a>GET请求操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const btn = document.getElementsByTagName(&#x27;button&#x27;)[0]</span><br><span class="line">const result = document.getElementById(&#x27;result&#x27;)</span><br><span class="line">btn.onclick = function () &#123;</span><br><span class="line">      // 1.创建对象</span><br><span class="line">      const xhr = new XMLHttpRequest()</span><br><span class="line">      // 2.初始化 设置请求方法和url</span><br><span class="line">      // 设置url参数的方式 地址后面跟 ？ xx=xx &amp; xx=xx &amp; xx=xx</span><br><span class="line">      xhr.open(&#x27;GET&#x27;, &#x27;http://127.0.0.1:8000/server?a=100&amp;b=200&amp;c=300&#x27;)</span><br><span class="line">      // 3.发送</span><br><span class="line">      xhr.send()</span><br><span class="line">      // 4.接收并判断</span><br><span class="line">      // on  when 当....时候</span><br><span class="line">      // readystate 是 xhr 对象中的属性, 表示状态 0 1 2 3 4</span><br><span class="line">      // change  改变</span><br><span class="line">      xhr.onreadystatechange = function () &#123;</span><br><span class="line">          //判断返回状态 (状态为4表示服务端返回了所有的结果)</span><br><span class="line">          if(xhr.readyState === 4) &#123;</span><br><span class="line">              //判断响应状态码 200  404  403 401 500</span><br><span class="line">              // 2xx 成功</span><br><span class="line">              if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt;= 300) &#123;</span><br><span class="line">                  //处理结果  行 头 空行 体</span><br><span class="line">                  result.innerHTML = xhr.response</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>后端的地址是使用express模拟的，需要先安装express 使用npm install express –save进行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 1.引入express</span><br><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line"></span><br><span class="line">// 2.创建应用对象</span><br><span class="line">const app = express()</span><br><span class="line"></span><br><span class="line">// 3.创建路由规则</span><br><span class="line">// get请求</span><br><span class="line">app.get(&#x27;/server&#x27;, (request, response) =&gt; &#123;</span><br><span class="line">     //设置响应头  设置允许跨域</span><br><span class="line">     response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);</span><br><span class="line">     //设置响应体</span><br><span class="line">     response.send(&#x27;HELLO AJAX GET&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="POST请求操作"><a href="#POST请求操作" class="headerlink" title="POST请求操作"></a>POST请求操作</h3><p>POST请求和GET请求类似，但可以设置请求体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 1.创建对象</span><br><span class="line">const xhr = new XMLHttpRequest()</span><br><span class="line">// 2.初始化</span><br><span class="line">xhr.open(&#x27;POST&#x27;, &#x27;http://127.0.0.1:8000/server&#x27;)</span><br><span class="line">// 设置请求头(请求头可以按预设值请求，也可以按自定义值请求，但自定义值需要后端有设置)</span><br><span class="line">xhr.setRequestHeader(&#x27;Content-Type&#x27;,&#x27;application/x-www-form-urlencoded&#x27;);</span><br><span class="line">xhr.setRequestHeader(&#x27;name&#x27;,&#x27;maki&#x27;);</span><br><span class="line">// 3.发送请求</span><br><span class="line">// 请求体的内容可以任意写，但要服务器能识别</span><br><span class="line">xhr.send(&#x27;a=100&amp;b=200&amp;c=300&#x27;);</span><br><span class="line">// xhr.send(&#x27;a:100&amp;b:200&amp;c:300&#x27;);</span><br><span class="line">// xhr.send(&#x27;1233211234567&#x27;);</span><br><span class="line">// 接收并判断</span><br><span class="line">xhr.onreadystatechange = function () &#123;</span><br><span class="line">    if(xhr.readyState === 4) &#123;</span><br><span class="line">        if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt;= 300) &#123;</span><br><span class="line">            result.innerHTML = xhr.response</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JSON (JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript (w3c制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p><p>通常来说，前端与后端交互需要使用JSON<br>前端使用JSON可以通过两种方式，手动转换和自动转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const xhr = new XMLHttpRequest()</span><br><span class="line">           </span><br><span class="line"> // 2.自动转换 需要提前设置响应体的数据类型</span><br><span class="line"> xhr.responseType = &#x27;json&#x27;;</span><br><span class="line"> </span><br><span class="line"> xhr.open(&#x27;GET&#x27;,&#x27;http://127.0.0.1:8000/json-server&#x27;)</span><br><span class="line"> xhr.send()</span><br><span class="line"> xhr.onreadystatechange = function () &#123;</span><br><span class="line">     if(xhr.readyState === 4) &#123;</span><br><span class="line">         if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt;= 300) &#123;</span><br><span class="line">             // 接收的数据是字符串，需要将其转换</span><br><span class="line">             // 1.手动转换 通过JSON将字符串转换为对象</span><br><span class="line">             // const data = JSON.parse(xhr.response)</span><br><span class="line">             // result.innerHTML = data.name</span><br><span class="line"></span><br><span class="line">             console.log(xhr.response);</span><br><span class="line">             result.innerHTML = xhr.response.name</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="Ajax的其他功能"><a href="#Ajax的其他功能" class="headerlink" title="Ajax的其他功能"></a>Ajax的其他功能</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//超时设置 2s 设置</span><br><span class="line">xhr.timeout = 2000;</span><br><span class="line">//超时回调 如果超时就回调</span><br><span class="line">xhr.ontimeout = function()&#123;</span><br><span class="line">    alert(&quot;网络异常, 请稍后重试!!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//网络异常回调</span><br><span class="line">xhr.onerror = function()&#123;</span><br><span class="line">    alert(&quot;你的网络似乎出了一些问题!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//取消请求</span><br><span class="line">x.abort()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="jQuery请求Ajax"><a href="#jQuery请求Ajax" class="headerlink" title="jQuery请求Ajax"></a>jQuery请求Ajax</h2><p>请求格式：$.请求方法类型(‘url’ ,{请求体} ,function() ,’json’)<br>jquery请求ajax比较方便，代码量减少，通用型请求能够更加直观的设置请求，增加代码的阅读性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// get/post请求</span><br><span class="line">$.get(&#x27;http://127.0.0.1:8000/jquery-server&#x27;, &#123;a:100, b:200&#125;, function(</span><br><span class="line">    console.log(data)</span><br><span class="line">), &#x27;json&#x27;)</span><br><span class="line"></span><br><span class="line">// 通用型请求</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    //url</span><br><span class="line">    url: &#x27;http://127.0.0.1:8000/jquery-server&#x27;,</span><br><span class="line">    //请求体参数</span><br><span class="line">    data: &#123;a:100, b:200&#125;,</span><br><span class="line">    //请求类型</span><br><span class="line">    type: &#x27;get&#x27;,</span><br><span class="line">    //响应体结果</span><br><span class="line">    dataType: &#x27;json&#x27;,</span><br><span class="line">    //成功的回调</span><br><span class="line">    success: function(data) &#123;</span><br><span class="line">        console.log(data)</span><br><span class="line">    &#125;,</span><br><span class="line">    //失败的回调</span><br><span class="line">    error: function() &#123;</span><br><span class="line">        console.log(&#x27;出错了&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    //头信息</span><br><span class="line">    headers: &#123;</span><br><span class="line">        c:256,</span><br><span class="line">        d:597</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Axios请求Ajax"><a href="#Axios请求Ajax" class="headerlink" title="Axios请求Ajax"></a>Axios请求Ajax</h2><p>Axios是一个基于promise的HTTP库，可以用在浏览器和node.js中<br>如果设置了baseURL，则url设置可以把协议、域名和端口省略<br>aixos返回的是一个promise函数，可以使用then调用成功的结果    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">// 配置baseURL</span><br><span class="line">axios.defaults.baseURL = &#x27;http://127.0.0.1:8000&#x27;</span><br><span class="line">// GET请求</span><br><span class="line">aixos.get(&#x27;/axios-server&#x27;, &#123;</span><br><span class="line">    // URL参数</span><br><span class="line">    params: &#123;</span><br><span class="line">        id:200,</span><br><span class="line">        level: 50</span><br><span class="line">    &#125;,</span><br><span class="line">    // 请求头信息</span><br><span class="line">    header: &#123;</span><br><span class="line">        name: &#x27;maki&#x27;,</span><br><span class="line">        age: &#x27;16&#x27;</span><br><span class="line">    &#125;.then((res) =&gt; console.log(res))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// POST请求，请求体必须写在前面，且用&#123;&#125;</span><br><span class="line">axios.post(&#x27;/axios-server&#x27;, &#123;</span><br><span class="line">    // 请求体</span><br><span class="line">    a:100,</span><br><span class="line">    b:200</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    // URL参数</span><br><span class="line">    params: &#123;</span><br><span class="line">        name: &#x27;setsuna&#x27;,</span><br><span class="line">        age: 17</span><br><span class="line">    &#125;,</span><br><span class="line">    // 请求头参数</span><br><span class="line">    headers: &#123;</span><br><span class="line">        height: 180,</span><br><span class="line">        weight: 180,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//通用型请求</span><br><span class="line">axios(&#123;</span><br><span class="line">    // 请求方法</span><br><span class="line">    methods: &#x27;POST&#x27;,</span><br><span class="line">    // url</span><br><span class="line">    url: &#x27;/axios-server&#x27;,</span><br><span class="line">    // url参数</span><br><span class="line">    params: &#123;</span><br><span class="line">        vip: 2010,</span><br><span class="line">        love: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    // 请求头</span><br><span class="line">    headers: &#123;</span><br><span class="line">        a:100,</span><br><span class="line">        b:500</span><br><span class="line">    &#125;,</span><br><span class="line">    // 请求体</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: &#x27;hi&#x27;,</span><br><span class="line">        age: 50</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then((response) =&gt; &#123;</span><br><span class="line">    //响应状态码</span><br><span class="line">    console.log(response.status);</span><br><span class="line">    //响应状态字符串</span><br><span class="line">    console.log(response.statusText);</span><br><span class="line">    //响应头信息</span><br><span class="line">    console.log(response.headers);</span><br><span class="line">    //响应体</span><br><span class="line">    console.log(response.data);</span><br></pre></td></tr></table></figure><h2 id="fetch请求"><a href="#fetch请求" class="headerlink" title="fetch请求"></a>fetch请求</h2><p>相比axios用的少，也可以使用promise的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fetch(&#x27;http://127.0.0.1:8000/fetch-server?vip=10&#x27;, &#123;</span><br><span class="line">    //请求方法</span><br><span class="line">    method: &#x27;POST&#x27;,</span><br><span class="line">    //请求头</span><br><span class="line">    headers: &#123;</span><br><span class="line">        name:&#x27;hi&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    //请求体</span><br><span class="line">    body: &#x27;username=admin&amp;password=admin&#x27;</span><br><span class="line">&#125;).then(response =&gt; &#123;</span><br><span class="line">    // return response.text();</span><br><span class="line">    return response.json();</span><br><span class="line">&#125;).then(response=&gt;&#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习Ajax（一）</title>
      <link href="/2021/10/28/%E5%AD%A6%E4%B9%A0Ajax%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2021/10/28/%E5%AD%A6%E4%B9%A0Ajax%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>学习Ajax</p><span id="more"></span><h2 id="什么是Ajax"><a href="#什么是Ajax" class="headerlink" title="什么是Ajax"></a>什么是Ajax</h2><p>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）；<br>AJAX 不是新的编程语言，而是一种使用现有标准的新方法；<br>AJAX 不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。</p><h2 id="Ajax的作用"><a href="#Ajax的作用" class="headerlink" title="Ajax的作用"></a>Ajax的作用</h2><p>Ajax的作用是实现网页和web服务器之间数据的异步传输。<br>Ajax是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p><h2 id="Ajax的优缺点"><a href="#Ajax的优缺点" class="headerlink" title="Ajax的优缺点"></a>Ajax的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>可以无需刷新页面而与服务器端进行通信。 </li><li>允许你根据用户事件来更新部分页面内容。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>没有浏览历史，不能回退 </li><li>存在跨域问题(同源) </li><li>SEO(搜索引擎优化) 不友好</li></ol><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>HTTP(Hyper Text Transfer Protocol) 超文本传输协议，是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准。<br>Ajax传输数据也要遵循这个协议</p><h2 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h2><p>请求报文是网页发送给web服务器的报文，用于请求数据<br><img src="/2021/10/28/%E5%AD%A6%E4%B9%A0Ajax%EF%BC%88%E4%B8%80%EF%BC%89/1.png"></p><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>①是请求方法，GET和POST是最常见的HTTP方法，除此以外还包括DELETE、HEAD、OPTIONS、PUT、TRACE。</p><p>②为请求对应的URL地址，它和报文头的Host属性组成完整的请求URL。</p><p>③是协议名称及版本号。</p><h3 id="请求头："><a href="#请求头：" class="headerlink" title="请求头："></a>请求头：</h3><p>④是HTTP的报文头，报文头包含若干个属性，格式为“属性名:属性值”，服务端据此获取客户端的信息。</p><p>与缓存相关的规则信息，均包含在header中</p><h3 id="请求体："><a href="#请求体：" class="headerlink" title="请求体："></a>请求体：</h3><p>⑤是报文体，它将一个页面表单中的组件值通过param1=value1&amp;param2=value2的键值对形式编码成一个格式化串，它承载多个请求参数的数据。不但报文体可以传递请求参数，请求URL也可以通过类似于“/chapter15/user.html? param1=value1&amp;param2=value2”的方式传递请求参数。 </p><h3 id="请求头属性"><a href="#请求头属性" class="headerlink" title="请求头属性"></a>请求头属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Client-IP：提供了运行客户端的机器的IP地址</span><br><span class="line">From：提供了客户端用户的E-mail地址</span><br><span class="line">Host：给出了接收请求的服务器的主机名和端口号</span><br><span class="line">Referer：提供了包含当前请求URI的文档的URL</span><br><span class="line">UA-Color：提供了与客户端显示器的显示颜色有关的信息</span><br><span class="line">UA-CPU：给出了客户端CPU的类型或制造商</span><br><span class="line">UA-OS：给出了运行在客户端机器上的操作系统名称及版本</span><br><span class="line">User-Agent：将发起请求的应用程序名称告知服务器       </span><br><span class="line">Accept：告诉服务器能够发送哪些媒体类型</span><br><span class="line">Accept-Charset：告诉服务器能够发送哪些字符集</span><br><span class="line">Accept-Encoding：告诉服务器能够发送哪些编码方式</span><br><span class="line">Accept-Language：告诉服务器能够发送哪些语言</span><br><span class="line">TE：告诉服务器可以使用那些扩展传输编码</span><br><span class="line">Expect：允许客户端列出某请求所要求的服务器行为</span><br><span class="line">Range：如果服务器支持范围请求，就请求资源的指定范围</span><br><span class="line">Cookie：客户端用它向服务器传送数据</span><br><span class="line">Cookie2：用来说明请求端支持的cookie版本</span><br></pre></td></tr></table></figure><h2 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h2><p>响应报文是服务器接收到网页发送的请求报文后，返回的数据<br>响应报文也由三部分组成（响应行+响应头+响应体）<br><img src="/2021/10/28/%E5%AD%A6%E4%B9%A0Ajax%EF%BC%88%E4%B8%80%EF%BC%89/2.png"></p><h3 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h3><p>①报文协议及版本； </p><p>②状态码及状态描述。</p><h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><p>③响应报文头，也是由多个属性组成。</p><h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><p>④响应报文体，网页需求的数据</p><h3 id="常见的状态码"><a href="#常见的状态码" class="headerlink" title="常见的状态码"></a>常见的状态码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">100：继续 客户端应当继续发送请求。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。</span><br><span class="line"></span><br><span class="line">101： 转换协议 在发送完这个响应最后的空行后，将会切换到在Upgrade 消息头中定义的那些协议。只有在切换新的协议更有好处的时候才应该采取类似措施。</span><br><span class="line"></span><br><span class="line">102：继续处理 由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。</span><br><span class="line"></span><br><span class="line">200：请求成功 处理方式：获得响应的内容，进行处理</span><br><span class="line"></span><br><span class="line">201：请求完成，结果是创建了新资源。新创建资源的URI可在响应的实体中得到 处理方式：爬虫中不会遇到</span><br><span class="line"></span><br><span class="line">202：请求被接受，但处理尚未完成 处理方式：阻塞等待</span><br><span class="line"></span><br><span class="line">204：服务器端已经实现了请求，但是没有返回新的信 息。如果客户是用户，则无须为此更新自身的文档视图。 处理方式：丢弃</span><br><span class="line"></span><br><span class="line">300：该状态码不被HTTP/1.0的应用程序直接使用， 只是作为3XX类型回应的默认解释。存在多个可用的被请求资源。 处理方式：若程序中能够处理，则进行进一步处理，如果程序中不能处理，则丢弃 </span><br><span class="line">301：请求到的资源都会分配一个永久的URL，这样就可以在将来通过该URL来访问此资源 处理方式：重定向到分配的URL</span><br><span class="line"></span><br><span class="line">302：请求到的资源在一个不同的URL处临时保存 处理方式：重定向到临时的URL</span><br><span class="line"></span><br><span class="line">304：请求的资源未更新</span><br><span class="line"></span><br><span class="line">400：非法请求</span><br><span class="line"></span><br><span class="line">401：未授权 处理方式：丢弃</span><br><span class="line"></span><br><span class="line">403：禁止 处理方式：丢弃</span><br><span class="line"></span><br><span class="line">404：没有找到 处理方式：丢弃</span><br><span class="line"></span><br><span class="line">500：服务器内部错误 服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在的源代码出现错误时出现。</span><br><span class="line"></span><br><span class="line">501：服务器无法识别 服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。</span><br><span class="line"></span><br><span class="line">502：错误网关 作为网关或者工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</span><br><span class="line"></span><br><span class="line">503：服务出错 由于临时的维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。</span><br></pre></td></tr></table></figure><h3 id="响应头属性"><a href="#响应头属性" class="headerlink" title="响应头属性"></a>响应头属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Age：(从最初创建开始)响应持续时间</span><br><span class="line"></span><br><span class="line">Public：服务器为其资源支持的请求方法列表</span><br><span class="line"></span><br><span class="line">Retry-After：如果资源不可用的话，在此日期或时间重试</span><br><span class="line"></span><br><span class="line">Server：服务器应用程序软件的名称和版本</span><br><span class="line"></span><br><span class="line">Title：对HTML文档来说，就是HTML文档的源端给出的标题</span><br><span class="line"></span><br><span class="line">Warning：比原因短语更详细一些的警告报文</span><br><span class="line"></span><br><span class="line">Accept-Ranges：对此资源来说，服务器可接受的范围类型</span><br><span class="line"></span><br><span class="line">Vary：服务器会根据这些首部的内容挑选出最适合的资源版本发送给客户端</span><br><span class="line"></span><br><span class="line">Proxy-Authenticate：来自代理的对客户端的质询列表</span><br><span class="line"></span><br><span class="line">Set-Cookie：在客户端设置数据，以便服务器对客户端进行标识</span><br><span class="line"></span><br><span class="line">Set-Cookie2：与Set-Cookie类似</span><br><span class="line"></span><br><span class="line">WWW-Authenticate：来自服务器的对客户端的质询列表</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Markdown来编写博客</title>
      <link href="/2021/10/26/%E4%BD%BF%E7%94%A8Markdown%E6%9D%A5%E7%BC%96%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/10/26/%E4%BD%BF%E7%94%A8Markdown%E6%9D%A5%E7%BC%96%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>前两篇博文已经将博客主体建立起来，但博客需要的文章，下面开始就学习如何新建和编写文章</p><span id="more"></span><h2 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h2><p>使用以下命令新建一篇文章</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章名称&quot;</span><br></pre></td></tr></table></figure><p>建立完成后，在source/_posts中会出现一个同名的md文件和一个文件夹<br>md文件就是使用Markdown来编写，文件夹里放图片</p><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式<br>下面介绍Markdown的书写规则</p><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h3><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><h3 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a>2.字体</h3><ul><li><p>加粗<br>要加粗的文字左右分别用两个*号包起来</p></li><li><p>斜体<br>要倾斜的文字左右分别用一个*号包起来</p></li><li><p>斜体加粗<br>要倾斜和加粗的文字左右分别用三个*号包起来</p></li><li><p>删除线<br>要加删除线的文字左右分别用两个~~号包起来</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**加粗的文字**</span><br><span class="line">*倾斜的文字*`</span><br><span class="line">***斜体加粗的文字***</span><br><span class="line">~~加删除线的文字~~</span><br></pre></td></tr></table></figure><h3 id="3-图片"><a href="#3-图片" class="headerlink" title="3.图片"></a>3.图片</h3><p>按以下代码书写，如果是本地图片，要把图片放在新建的同名文件夹内</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![描述](网络地址/绝对地址/相对地址)</span><br></pre></td></tr></table></figure><h3 id="4-超链接"><a href="#4-超链接" class="headerlink" title="4.超链接"></a>4.超链接</h3><p>按以下代码书写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[名字](超链接地址)</span><br></pre></td></tr></table></figure><h3 id="5-列表"><a href="#5-列表" class="headerlink" title="5.列表"></a>5.列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br></pre></td></tr></table></figure><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>语法：数字加点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一列</span><br><span class="line">2. 第二列</span><br><span class="line">3. 第三列</span><br></pre></td></tr></table></figure><h3 id="6-列表"><a href="#6-列表" class="headerlink" title="6.列表"></a>6.列表</h3><p>按以下代码书写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">-|-|-</span><br><span class="line">内容:|:内容:|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br></pre></td></tr></table></figure><h3 id="7-代码"><a href="#7-代码" class="headerlink" title="7.代码"></a>7.代码</h3><p>单行代码：代码之间分别用一个反引号包起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`代码`</span><br></pre></td></tr></table></figure><p>多行代码：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(```)</span><br><span class="line">代码</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure><p>为了防止转译，添加了两个括号，使用的时候把括号去掉即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Next主题</title>
      <link href="/2021/10/23/%E4%BD%BF%E7%94%A8Next%E4%B8%BB%E9%A2%98/"/>
      <url>/2021/10/23/%E4%BD%BF%E7%94%A8Next%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在上一篇Hexo + Github 快速搭建个人博客后，我们成功创建自己的博客。但博客样式过于简陋，这里就尝试使用next主题来使我们的博客美观起来。</p><span id="more"></span><h2 id="next主题的下载和安装"><a href="#next主题的下载和安装" class="headerlink" title="next主题的下载和安装"></a>next主题的下载和安装</h2><p>在根目录下的终端执行以下命令即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>如果需要选择版本，可以去github上选择下载</p><p><a href="https://github.com/theme-next/hexo-theme-next">主题链接</a></p><p>设置站点配置文件_config.yml，将theme改为next即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><h2 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h2><p>在配置next前，先对hexo进行配置，打开根目录下的站点配置文件_config.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: My Blog  # 博客主标题</span><br><span class="line">subtitle: 记录脚步  # 副标题</span><br><span class="line">description: 余博文的小站  # 描述</span><br><span class="line">keywords: 博客  # 关键字</span><br><span class="line">author: 余博文  # 作者</span><br><span class="line">language: zh-CN  # 语言</span><br><span class="line">timezone: Asia/Shanghai  # 时区</span><br></pre></td></tr></table></figure><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><h3 id="1-主题风格"><a href="#1-主题风格" class="headerlink" title="1.主题风格"></a>1.主题风格</h3><p>Next有四种主题可供选取，分别是Muse、Mist、Pisces、Gemini。<br>可以在站点配置文件/themes/next/_config.yml文件中进行更改，我选择的是Gemini主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Scheme Settings</span><br><span class="line"></span><br><span class="line"># Schemes</span><br><span class="line"># scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure><h3 id="2-配置侧边栏"><a href="#2-配置侧边栏" class="headerlink" title="2.配置侧边栏"></a>2.配置侧边栏</h3><ul><li>依然在next站点配置文件中修改，选择合适的标签将注释去掉hexo new page “categories”</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home  # 首页</span><br><span class="line">  #about: /about/ || fa fa-user  # 关于</span><br><span class="line">  tags: /tags/ || fa fa-tags  #标签</span><br><span class="line">  categories: /categories/ || fa fa-th  # 分类</span><br><span class="line">  archives: /archives/ || fa fa-archive  # 文章</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar  # 日历</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap  # 站点地图，供搜索引擎爬取</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br><span class="line"></span><br><span class="line"># Enable / Disable menu icons / item badges.</span><br><span class="line">menu_settings:</span><br><span class="line">  icons: true # 是否显示各个页面的图标</span><br><span class="line">  badges: true # 是否显示分类/标签/归档页的内容量</span><br></pre></td></tr></table></figure><ul><li>执行下面命令新建相关文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source\tags\index.md</span><br><span class="line">source\categories\index.md</span><br></pre></td></tr></table></figure><h3 id="3-设置头像"><a href="#3-设置头像" class="headerlink" title="3.设置头像"></a>3.设置头像</h3><p>头像的地址设置可以是网络地址，也可以是本地的绝对/相对地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: /images/avatar.png</span><br><span class="line">  # If true, the avatar will be dispalyed in circle.</span><br><span class="line">  rounded: true  # 头像是否以圆形显示</span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line">  rotated: false  # 鼠标移动上去是否旋转</span><br></pre></td></tr></table></figure><h3 id="4-设置社交链接"><a href="#4-设置社交链接" class="headerlink" title="4.设置社交链接"></a>4.设置社交链接</h3><p>设置一些常用的社交工具的超链接，如github，qq，邮箱等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Social Links</span><br><span class="line"># Usage: `Key: permalink || icon`</span><br><span class="line"># Key is the link label showing to end users.</span><br><span class="line"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/NewGenm || fab fa-github</span><br><span class="line">  E-Mail: mailto:840205028@qq.com || fa fa-envelope</span><br><span class="line">  QQ: http://wpa.qq.com/msgrd?v=3&amp;uin=你的qq号&amp;site=qq&amp;menu=yes || fab fa-qq</span><br><span class="line">  # WeiXin: mailto:840205028@qq.com || fa-weixin</span><br><span class="line">  #Weibo: https://weibo.com/yourname || fab fa-weibo</span><br><span class="line">  #Google: https://plus.google.com/yourname || fab fa-google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || fab fa-twitter</span><br><span class="line">  #FB Page: https://www.facebook.com/yourname || fab fa-facebook</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || fab fa-youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || fab fa-instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || fab fa-skype</span><br></pre></td></tr></table></figure><p>设置完成后的效果，比原生的好看多了<br><img src="/2021/10/23/%E4%BD%BF%E7%94%A8Next%E4%B8%BB%E9%A2%98/img/1.png"></p><h2 id="小功能配置"><a href="#小功能配置" class="headerlink" title="小功能配置"></a>小功能配置</h2><h3 id="1-显示本地化图片"><a href="#1-显示本地化图片" class="headerlink" title="1.显示本地化图片"></a>1.显示本地化图片</h3><p>安装 hexo-asset-image 插件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save  </span><br></pre></td></tr></table></figure><p>修改根目录中的站点配置中post_asset_folder的值为true，每次新建文章时，会自动生成同名的文件夹，可以通过绝对/相对地址值引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用这种方式引用图片</span><br><span class="line">![](文件夹名/图片名称)</span><br></pre></td></tr></table></figure><h3 id="2-增加返回顶部按钮"><a href="#2-增加返回顶部按钮" class="headerlink" title="2.增加返回顶部按钮"></a>2.增加返回顶部按钮</h3><p>修改next站点配置文件中的back2top选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  enable: true  #开启</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: false  # 将返回按钮设置在侧边栏</span><br><span class="line">  # Scroll percent label in b2t button. </span><br><span class="line">  scrollpercent: false  # 按钮上显示进度百分比</span><br></pre></td></tr></table></figure><h3 id="3-去掉顶部黑线"><a href="#3-去掉顶部黑线" class="headerlink" title="3.去掉顶部黑线"></a>3.去掉顶部黑线</h3><p>点开文件themes\next\layout_layout.swig，删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;”</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Github 快速搭建个人博客</title>
      <link href="/2021/10/20/Hexo+Github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/10/20/Hexo+Github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>想要拥有个人的免费博客，使用Hexo + Github就能快速拥有</p><span id="more"></span><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><ul><li><p>首先进入Node.js的官网 <a href="https://nodejs.org/zh-cn/download/">node.js</a><br><img src="/2021/10/20/Hexo+Github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/img/1.png"></p><!-- ![node](https://www.runoob.com/wp-content/uploads/2014/03/4530AA77-2208-47FA-A900-91C93AEC95AF.jpg) --></li><li><p>一直点击下一步即可完成安装</p></li><li><p>检查版本号</p></li><li><p>点击window图标，输入cmd，打开控制台</p></li><li><p>输入node -v检查版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Adminstrator&gt;node -v</span><br><span class="line">v12.18.1</span><br></pre></td></tr></table></figure></li></ul><p>heox官方建议使用 Node.js 12.0 及以上版本</p><h2 id="创建Github项目"><a href="#创建Github项目" class="headerlink" title="创建Github项目"></a>创建Github项目</h2><ul><li>打开Github网页，注册/登陆账号</li><li>点击右上角加号的新建仓库</li></ul><p><img src="/2021/10/20/Hexo+Github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/img/3.png"></p><ul><li><p>之后写上仓库名字，一定要按照格式来写：username.github.io（username是你的用户名）。之后写下介绍，最后点击创建，这样仓库就创建完成了<br><img src="/2021/10/20/Hexo+Github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/img/4.png"></p></li><li><p>点开新创建的仓库，可以看到一个我们仓库的地址，之后会用到<br><img src="/2021/10/20/Hexo+Github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/img/5.png"></p></li></ul><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><ul><li>Node.js 安装好以后，同时为我们装好了 npm 工具， 这是一个包管理工具，通过它我们可以下载各种插件，在终端中输入一下命令进行安装，最后hexo -v检查版本<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\test&gt; npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">changed 58 packages in 31s</span><br><span class="line"></span><br><span class="line">1 package is looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"></span><br><span class="line">PS C:\Users\Administrator\Desktop\test&gt; hexo -v</span><br><span class="line">hexo-cli: 4.3.0</span><br></pre></td></tr></table></figure>这样就安装好hexo了</li></ul><h2 id="创建本地博客框架"><a href="#创建本地博客框架" class="headerlink" title="创建本地博客框架"></a>创建本地博客框架</h2><ul><li>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\test\blog&gt; hexo init</span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">fatal: unable to access &#x27;https://github.com/hexojs/hexo-starter.git/&#x27;: OpenSSL SSL_read: Connection was reset, errno 10054</span><br><span class="line">WARN  git clone failed. Copying data instead</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure></li></ul><p>这样就成功安装好了<br><img src="/2021/10/20/Hexo+Github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/img/6.png"></p><ul><li><p>尝试在本地浏览一下，输入一下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p>在浏览器中输入<a href="http://localhost:4000/">http://localhost:4000/</a></p></li></ul><p><img src="/2021/10/20/Hexo+Github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/img/7.png"></p><p>成功运行!</p><h2 id="部署到Github上"><a href="#部署到Github上" class="headerlink" title="部署到Github上"></a>部署到Github上</h2><p>在配置文件_config.yml中修改部署地址，来实现将hexo部署到我们创建的仓库中</p><ul><li><p>打开根目录下的_config.yml文件，找到deploy相关，输入一下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository:</span><br><span class="line">    github: https://Github.com/yu-bowen445/blog.git  #这里是你的仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p>配置完deploy后，配置下url，格式为 username.github.io</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: https://newgenm.github.io/</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></pre></td></tr></table></figure></li><li><p>安装 Hexo git 部署插件，让 Hexo知道通过什么类型部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>最后输入hexo clean 、hexo g 和 hexo d将代码部署到Github上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\test\blog&gt; hexo clean</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deleted database.</span><br><span class="line">INFO  Deleted public folder.</span><br><span class="line"></span><br><span class="line">PS C:\Users\Administrator\Desktop\test\blog&gt; hexo g</span><br><span class="line">INFO  Validating config</span><br><span class="line">...</span><br><span class="line">INFO  28 files generated in 813 ms</span><br><span class="line"></span><br><span class="line">PS C:\Users\Administrator\Desktop\test\blog&gt; hexo d</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">....</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure></li><li><p>我们打开仓库检查一下<br><img src="/2021/10/20/Hexo+Github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/img/8.png"></p></li></ul><p>成功添加</p><ul><li><p>点击setting，点击pages，github已经给我们建立好了静态网站<br><img src="/2021/10/20/Hexo+Github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/img/9.png"></p></li><li><p>点击连接<br><img src="/2021/10/20/Hexo+Github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/img/11.png"></p></li></ul><p>成功创建属于我们自己的博客！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
